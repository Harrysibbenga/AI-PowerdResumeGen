# Backend environment variables template
# Make a copy of this file named .env and fill in your values

# =============================================================================
# GENERAL SETTINGS
# =============================================================================
PROJECT_NAME="Resume Generator API"
DEBUG=True
ENVIRONMENT=development  # development, staging, production

# API Settings
API_HOST=0.0.0.0
API_PORT=8000
CORS_ORIGINS=http://localhost:3000,http://localhost:4321

# Frontend URL (for email links and redirects)
FRONTEND_URL=http://localhost:3000

# =============================================================================
# FIREBASE AUTHENTICATION
# =============================================================================
FIREBASE_SERVICE_ACCOUNT_PATH=./firebase/serviceAccount.json
FIREBASE_WEB_API_KEY=your-firebase-web-api-key

# =============================================================================
# JWT AUTHENTICATION & SECURITY
# =============================================================================
# JWT Token Configuration
JWT_SECRET_KEY=your-super-secret-jwt-key-change-this-in-production-use-openssl-rand-hex-32
JWT_ALGORITHM=HS256
ACCESS_TOKEN_EXPIRE_MINUTES=60        # Access token expiry (1 hour recommended)
REFRESH_TOKEN_EXPIRE_DAYS=7           # Refresh token expiry (7 days)
REFRESH_TOKEN_EXPIRE_DAYS_REMEMBER=30 # Refresh token expiry with "remember me" (30 days)

# Session Management (Legacy - used alongside JWT)
SESSION_TIMEOUT_HOURS=24              # Firebase session timeout
TOKEN_EXPIRY_HOURS=24                 # Email verification token expiry
RESET_TOKEN_EXPIRY_HOURS=1            # Password reset token expiry

# Account Security & Lockout
MAX_FAILED_LOGIN_ATTEMPTS=5           # Lock account after N failed attempts
ACCOUNT_LOCKOUT_DURATION_MINUTES=30   # How long account stays locked

# Password Requirements
PASSWORD_MIN_LENGTH=8                 # Minimum password length

# =============================================================================
# EMAIL CONFIGURATION (Required for Authentication Features)
# =============================================================================
# SMTP Server Settings
SMTP_SERVER=smtp.gmail.com
SMTP_PORT=587
SMTP_USERNAME=your-email@gmail.com
SMTP_PASSWORD=your-gmail-app-password  # Use App Password for Gmail
SMTP_FROM_EMAIL=noreply@yourapp.com    # Email address shown as sender
SMTP_FROM_NAME=Resume Generator         # Name shown as sender

# Email Templates Directory (optional)
EMAIL_TEMPLATES_DIR=./templates/email

# =============================================================================
# TWO-FACTOR AUTHENTICATION
# =============================================================================
# 2FA Configuration
APP_NAME_2FA=Resume Generator         # Name shown in authenticator apps
TOTP_ISSUER_NAME=Resume Generator     # Issuer name for TOTP tokens
TOTP_VALID_WINDOW=1                   # Time window for 2FA codes (in 30-sec intervals)
BACKUP_CODES_COUNT=8                  # Number of backup codes to generate

# =============================================================================
# RATE LIMITING (Requests per time window)
# =============================================================================
# Authentication Rate Limits
RATE_LIMIT_AUTH_REQUESTS=5           # Login attempts per window
RATE_LIMIT_AUTH_WINDOW=60            # Auth rate limit window (seconds)

# Email Rate Limits
RATE_LIMIT_EMAIL_REQUESTS=3          # Email requests per window
RATE_LIMIT_EMAIL_WINDOW=300          # Email rate limit window (seconds)

# 2FA Rate Limits
RATE_LIMIT_2FA_REQUESTS=5            # 2FA attempts per window
RATE_LIMIT_2FA_WINDOW=300            # 2FA rate limit window (seconds)

# JWT Refresh Rate Limits
RATE_LIMIT_REFRESH_REQUESTS=10       # Token refresh attempts per window
RATE_LIMIT_REFRESH_WINDOW=60         # Refresh rate limit window (seconds)

# Token Cleanup
CLEANUP_EXPIRED_TOKENS_HOURS=6       # How often to clean expired tokens

# =============================================================================
# AI SERVICES
# =============================================================================
# OpenAI
OPENAI_API_KEY=your-openai-api-key
GPT_MODEL=gpt-4-turbo  # or another model like gpt-3.5-turbo

# DeepSeek (optional alternative to OpenAI)
DEEPSEEK_API_KEY=your-deepseek-api-key
DEEPSEEK_MODEL=deepseek-coder
USE_DEEPSEEK=False  # Set to True to use DeepSeek instead of OpenAI

# =============================================================================
# PAYMENT PROCESSING
# =============================================================================
# Stripe
STRIPE_API_KEY=your-stripe-secret-key
STRIPE_WEBHOOK_SECRET=your-stripe-webhook-secret
STRIPE_ONE_TIME_PRICE_ID=price_xxxxxxxxxxxxx
STRIPE_SUBSCRIPTION_PRICE_ID=price_xxxxxxxxxxxxx

# =============================================================================
# FILE STORAGE & EXPORTS
# =============================================================================
# Export settings
EXPORT_TEMPLATES_DIR=./templates

# Storage (for resume exports)
STORAGE_PROVIDER=local  # local, s3, gcs, etc.
STORAGE_LOCAL_PATH=./exports
STORAGE_S3_BUCKET=your-s3-bucket-name
STORAGE_S3_REGION=your-s3-bucket-region
AWS_ACCESS_KEY_ID=your-aws-access-key
AWS_SECRET_ACCESS_KEY=your-aws-secret-key

# =============================================================================
# SECURITY & LOGGING
# =============================================================================
# Legacy Security (still used for some features)
SECRET_KEY=your-secret-key-at-least-32-characters

# Logging
LOG_LEVEL=INFO  # DEBUG, INFO, WARNING, ERROR, CRITICAL
LOG_FORMAT="%(asctime)s - %(name)s - %(levelname)s - %(message)s"

# =============================================================================
# JWT AUTHENTICATION SETUP GUIDE
# =============================================================================
# 
# REQUIRED FOR JWT AUTHENTICATION:
# 
# 1. GENERATE JWT SECRET KEY:
#    Run this command to generate a secure JWT secret:
#    python -c "import secrets; print('JWT_SECRET_KEY=' + secrets.token_urlsafe(32))"
#    
#    Or use OpenSSL:
#    openssl rand -hex 32
#    
#    Copy the output and set JWT_SECRET_KEY above
#
# 2. FIREBASE SETUP:
#    - Create a Firebase project at https://console.firebase.google.com
#    - Enable Authentication and Firestore
#    - Download serviceAccount.json and place in ./firebase/
#    - Get your Web API Key from Project Settings
#    - Firebase is used for user management, JWT handles sessions
#
# 3. EMAIL SETUP (Required for password reset, email verification, 2FA):
#    
#    Option A - Gmail with App Password (Recommended for development):
#    - Enable 2FA on your Gmail account
#    - Generate an App Password: https://myaccount.google.com/apppasswords
#    - Use your Gmail address for SMTP_USERNAME
#    - Use the generated App Password for SMTP_PASSWORD
#    
#    Option B - SendGrid (Recommended for production):
#    - Sign up at https://sendgrid.com
#    - Get your API key
#    - SMTP_SERVER=smtp.sendgrid.net
#    - SMTP_PORT=587
#    - SMTP_USERNAME=apikey
#    - SMTP_PASSWORD=your-sendgrid-api-key
#    
#    Option C - AWS SES:
#    - Set up SES in AWS Console
#    - Get SMTP credentials
#    - SMTP_SERVER=email-smtp.us-east-1.amazonaws.com (adjust region)
#    - SMTP_PORT=587
#    - Use your SES SMTP username/password
#
# 4. FRONTEND_URL:
#    - Set to your frontend application URL
#    - Used for email verification and password reset links
#    - Development: http://localhost:3000
#    - Production: https://yourdomain.com
#
# 5. TOKEN EXPIRY CONFIGURATION:
#    - ACCESS_TOKEN_EXPIRE_MINUTES: Short-lived (15-60 minutes)
#    - REFRESH_TOKEN_EXPIRE_DAYS: Medium-lived (7-30 days)
#    - Adjust based on your security requirements
#
# 6. ACCOUNT LOCKOUT:
#    - MAX_FAILED_LOGIN_ATTEMPTS: Prevent brute force attacks
#    - ACCOUNT_LOCKOUT_DURATION_MINUTES: Balance security vs UX
#    - Consider your user base and threat model
#
# 7. RATE LIMITING:
#    - Adjust based on your expected traffic
#    - Higher limits for production, lower for development
#    - Consider your server capacity
#
# =============================================================================
# AUTHENTICATION FLOW OVERVIEW
# =============================================================================
#
# This backend uses a hybrid Firebase + JWT approach:
#
# 1. USER REGISTRATION:
#    - Users created in Firebase Auth
#    - User data stored in Firestore
#    - Email verification required
#
# 2. LOGIN PROCESS:
#    - Credentials verified against Firebase
#    - JWT tokens generated by backend
#    - Access token (short-lived) + Refresh token (long-lived)
#    - Optional 2FA verification
#
# 3. API REQUESTS:
#    - Frontend sends JWT access token in Authorization header
#    - Backend verifies JWT signature
#    - No Firebase calls needed for each request
#
# 4. TOKEN REFRESH:
#    - When access token expires, use refresh token
#    - New access token + refresh token returned
#    - Old refresh token revoked
#
# 5. LOGOUT:
#    - Refresh tokens revoked from database
#    - Optional: logout from all devices
#
# BENEFITS:
# ✅ Enhanced security (backend-only auth)
# ✅ Better performance (no Firebase calls per request)
# ✅ Account lockout protection
# ✅ Comprehensive 2FA with backup codes
# ✅ Session management with device tracking
# ✅ Rate limiting protection
#
# =============================================================================
# PRODUCTION CHECKLIST
# =============================================================================
#
# Before deploying to production:
# 
# □ Generate strong JWT_SECRET_KEY (32+ characters)
# □ Change ENVIRONMENT to "production"
# □ Set DEBUG to False
# □ Use a production-grade email service (SendGrid, AWS SES)
# □ Set appropriate token expiry times
# □ Configure strong rate limits
# □ Set MAX_FAILED_LOGIN_ATTEMPTS appropriately
# □ Use HTTPS for FRONTEND_URL
# □ Set strong SECRET_KEY (32+ characters)
# □ Configure proper CORS_ORIGINS
# □ Enable monitoring and logging
# □ Test all authentication flows:
#   - Registration with email verification
#   - Login with and without 2FA
#   - Token refresh
#   - Password reset
#   - Account lockout
#   - Logout (single device and all devices)
# □ Verify email delivery works
# □ Test 2FA setup and verification
# □ Test backup codes functionality
# □ Load test authentication endpoints
# □ Set up monitoring for failed login attempts
# □ Configure log rotation and alerting
#
# =============================================================================
# SECURITY CONSIDERATIONS
# =============================================================================
#
# 1. JWT SECRET ROTATION:
#    - Regularly rotate JWT_SECRET_KEY
#    - Implement graceful key rotation if needed
#
# 2. REFRESH TOKEN STORAGE:
#    - Tokens are hashed before storage in Firestore
#    - Consider additional encryption for sensitive deployments
#
# 3. RATE LIMITING:
#    - Current implementation is in-memory
#    - For production, consider Redis-based rate limiting
#
# 4. ACCOUNT MONITORING:
#    - Monitor failed login attempts
#    - Alert on suspicious patterns
#    - Consider geographic restrictions if needed
#
# 5. 2FA BACKUP CODES:
#    - Users should securely store backup codes
#    - Consider forcing download/print during setup
#
# 6. SESSION MANAGEMENT:
#    - Refresh tokens limited to 5 per user
#    - Old tokens automatically cleaned up
#    - Consider device tracking for enhanced security
#
# =============================================================================